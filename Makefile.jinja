.PHONY: help install lint test security check-all run build publish clean

# Default target
help: ## Show this help message
	@echo "Available commands:"
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  \033[36m%-15s\033[0m %s\n", $$1, $$2}'

install: ## Set up development environment with uv
	@echo "Installing dependencies..."
	uv sync --all-extras
	@echo "✓ Development environment ready!"

lint: ## Format and lint code with ruff
	@echo "Formatting code..."
	uv run ruff format .
	@echo "Linting code..."
	uv run ruff check --fix .
	@echo "Type checking..."
	uv run mypy
	@echo "✓ Code formatting and linting complete!"

test: ## Run tests with pytest and coverage
	@echo "Running tests..."
	uv run pytest
	@echo "✓ Tests complete!"

security: ## Run security scan with bandit
	@echo "Running security scan..."
	uv run bandit -r src
	@echo "✓ Security scan complete!"

check-all: lint test security ## Run all quality checks
	@echo "✓ All quality checks passed!"

run: ## Execute the CLI application (use ARGS="--help" for options)
	uv run python -m {{ package_name }} $(ARGS)

build: ## Build distribution packages
	@echo "Building package..."
	uv run python -m build
	@echo "✓ Package built successfully!"
	@echo "Built files:"
	@ls -la dist/

publish: build ## Upload package to PyPI (requires TWINE_USERNAME and TWINE_PASSWORD)
	@echo "Publishing to PyPI..."
	uv run twine upload dist/*
	@echo "✓ Package published successfully!"

clean: ## Remove build artifacts and cache files
	@echo "Cleaning up..."
	rm -rf build/
	rm -rf dist/
	rm -rf *.egg-info/
	rm -rf .coverage
	rm -rf htmlcov/
	rm -rf .pytest_cache/
	rm -rf .mypy_cache/
	rm -rf .ruff_cache/
	find . -type d -name __pycache__ -exec rm -rf {} +
	find . -type f -name "*.pyc" -delete
	@echo "✓ Cleanup complete!"

# Development shortcuts
dev-install: install ## Alias for install

format: ## Format code only (no linting)
	uv run ruff format .

check: ## Check code without fixing
	uv run ruff check .
	uv run mypy

watch-test: ## Run tests in watch mode (requires pytest-watch)
	uv run ptw

# CI/CD helpers
ci-install: ## Install dependencies for CI
	uv sync --frozen

ci-test: ## Run tests in CI mode
	uv run pytest --cov={{ package_name }} --cov-report=xml

# Package info
info: ## Show package information
	@echo "Package: {{ package_name }}"
	@echo "Version: {{ initial_version }}"
	@echo "Author: {{ author_name }}"
	@echo "Python: {{ python_version }}+"