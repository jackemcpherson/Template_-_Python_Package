[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "{{ project_slug }}"
version = "{{ initial_version }}"
description = "{{ project_description }}"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "{{ author_name }}", email = "{{ author_email }}"}
]
keywords = ["cli", "typer", "python"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: {{ python_version }}",
    "Programming Language :: Python :: 3 :: Only",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: System Shells",
    "Topic :: Utilities",
]
requires-python = ">={{ python_version }}"
dependencies = [
    "typer[all]>=0.12.0",
{%- if include_rich_output %}
    "rich>=13.0.0",
{%- endif %}
{%- if include_config %}
    "toml>=0.10.0",
{%- endif %}
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
    "mypy>=1.8.0",
    "ruff>=0.2.0",
    "bandit>=1.7.0",
    "build>=1.0.0",
    "twine>=4.0.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-cov>=4.0.0",
]

[project.urls]
Homepage = "https://github.com/{{ github_username }}/{{ project_slug }}"
Documentation = "https://github.com/{{ github_username }}/{{ project_slug }}#readme"
Repository = "https://github.com/{{ github_username }}/{{ project_slug }}"
"Bug Tracker" = "https://github.com/{{ github_username }}/{{ project_slug }}/issues"

[project.scripts]
{{ package_name }} = "{{ package_name }}.cli:app"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"{{ package_name }}" = ["py.typed"]

# Ruff configuration
[tool.ruff]
target-version = "py{{ python_version | replace('.', '') }}"
line-length = 88
src = ["src", "tests"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG001", # unused-function-argument
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "Q", # flake8-quotes
    "FLY", # flynt
    "PERF", # perflint
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = ["ARG", "FBT"]

[tool.ruff.lint.isort]
known-first-party = ["{{ package_name }}"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

# MyPy configuration
[tool.mypy]
python_version = "{{ python_version }}"
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "--cov={{ package_name }}",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-fail-under=80",
    "--strict-markers",
    "--strict-config",
    "--disable-warnings",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
branch = true

[tool.coverage.report]
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Bandit configuration
[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101", "B601"]